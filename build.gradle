buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'http://maven.jinuo.me/repository/jinuo/' }
        maven { url 'http://maven.jinuo.me/repository/jinuo-snapshot/' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${SPRINGBOOT_VERSION}")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$KOTLIN_VERSION"
        classpath 'me.jinuo.imf:librarian-plugin:1.0.0'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.10.0"
    }
}
apply plugin: 'kotlin'
apply plugin: "kotlin-spring"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin-kapt'
group = GROUP
version = VERSION
sourceCompatibility = '1.8'


repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation("org.springframework.boot:spring-boot-configuration-processor")
    kapt 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    implementation 'com.alibaba:fastjson:1.2.58'
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

apply plugin: 'librarian'
mavenPublish {
    group = GROUP //选填 默认为项目group
    version = VERSION//选填 默认为项目version
    artifactId = 'hulk-spring-boot-starter' //选填 默认为项目名
    name = 'hulk' //选填
    description = 'hulk websocket' //选填
    developerId = "websocket" //选填
    developerName = "Frank" //选填

    targets {
        uploadArchives {
            signing = false //选填
        }
    }
}